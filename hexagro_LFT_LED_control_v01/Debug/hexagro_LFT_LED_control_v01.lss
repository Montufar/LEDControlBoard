
hexagro_LFT_LED_control_v01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000510  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102c  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000add  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000071bd  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000791  00000000  00000000  0000a215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000a9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000027e8  00000000  00000000  0000aac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	29 c0       	rjmp	.+82     	; 0x56 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__bad_interrupt>
   c:	24 c0       	rjmp	.+72     	; 0x56 <__bad_interrupt>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__bad_interrupt>
  10:	22 c0       	rjmp	.+68     	; 0x56 <__bad_interrupt>
  12:	21 c0       	rjmp	.+66     	; 0x56 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__bad_interrupt>
  16:	1f c0       	rjmp	.+62     	; 0x56 <__bad_interrupt>
  18:	1e c0       	rjmp	.+60     	; 0x56 <__bad_interrupt>
  1a:	1d c0       	rjmp	.+58     	; 0x56 <__bad_interrupt>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__bad_interrupt>
  1e:	1b c0       	rjmp	.+54     	; 0x56 <__bad_interrupt>
  20:	1a c0       	rjmp	.+52     	; 0x56 <__bad_interrupt>
  22:	19 c0       	rjmp	.+50     	; 0x56 <__bad_interrupt>
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__vector_18>
  26:	17 c0       	rjmp	.+46     	; 0x56 <__bad_interrupt>
  28:	16 c0       	rjmp	.+44     	; 0x56 <__bad_interrupt>
  2a:	15 c0       	rjmp	.+42     	; 0x56 <__bad_interrupt>
  2c:	14 c0       	rjmp	.+40     	; 0x56 <__bad_interrupt>
  2e:	13 c0       	rjmp	.+38     	; 0x56 <__bad_interrupt>
  30:	12 c0       	rjmp	.+36     	; 0x56 <__bad_interrupt>
  32:	11 c0       	rjmp	.+34     	; 0x56 <__bad_interrupt>
  34:	10 c0       	rjmp	.+32     	; 0x56 <__bad_interrupt>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf ef       	ldi	r28, 0xFF	; 255
  3c:	d2 e0       	ldi	r29, 0x02	; 2
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_clear_bss>:
  42:	21 e0       	ldi	r18, 0x01	; 1
  44:	a0 e0       	ldi	r26, 0x00	; 0
  46:	b1 e0       	ldi	r27, 0x01	; 1
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	af 30       	cpi	r26, 0x0F	; 15
  4e:	b2 07       	cpc	r27, r18
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>
  52:	19 d0       	rcall	.+50     	; 0x86 <main>
  54:	21 c2       	rjmp	.+1090   	; 0x498 <_exit>

00000056 <__bad_interrupt>:
  56:	d4 cf       	rjmp	.-88     	; 0x0 <__vectors>

00000058 <coms_uart0Init>:
} 

void coms_uart0Init(void)
{
	// Turn on the reception circuitry
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
  58:	e1 ec       	ldi	r30, 0xC1	; 193
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	80 81       	ld	r24, Z
  5e:	88 61       	ori	r24, 0x18	; 24
  60:	80 83       	st	Z, r24
	// Use 8-bit character sizes
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
  62:	a2 ec       	ldi	r26, 0xC2	; 194
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	8c 91       	ld	r24, X
  68:	86 60       	ori	r24, 0x06	; 6
  6a:	8c 93       	st	X, r24
	// Enable USART RX interruption
	UCSR0B |= (1 << RXCIE0 );
  6c:	80 81       	ld	r24, Z
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	80 83       	st	Z, r24
	// Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0H = (BAUD_PRESCALE >> 8);
  72:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRR0L = BAUD_PRESCALE;
  76:	83 e3       	ldi	r24, 0x33	; 51
  78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
  7c:	08 95       	ret

0000007e <coms_initRs485>:

#include "coms.h"

void coms_initRs485(void) {
	//initialize USART as UART
	coms_uart0Init();
  7e:	ec df       	rcall	.-40     	; 0x58 <coms_uart0Init>
	
	/* Setup of RS485 ports:	
	-To transmit, REDE must be high
	-To receive, REDE must be low */
	LOW(REDE);
  80:	5a 98       	cbi	0x0b, 2	; 11
	OUTPUT(REDE);
  82:	52 9a       	sbi	0x0a, 2	; 10
  84:	08 95       	ret

00000086 <main>:
coms_message_U coms_receivedMessage = { 0 };

int main (void)
{
	//initialize PWM outputs
	pwm_initLight();
  86:	cd d1       	rcall	.+922    	; 0x422 <pwm_initLight>
	
	//initialize communication
	coms_initRs485();
  88:	fa df       	rcall	.-12     	; 0x7e <coms_initRs485>
	
	//enable interrupts
	sei();
  8a:	78 94       	sei
			{
				pwm_changeLightsIntensity(1u, os_ledBlinkCount);
				pwm_changeLightsIntensity(2u, os_ledBlinkCount);
				//pwm_changeLightsIntensity(3, os_ledBlinkCount);
			} else if ((os_ledBlinkCount > 100u) && (os_ledBlinkCount <= 200u)){
				pwm_changeLightsIntensity(1u, 200u - os_ledBlinkCount);
  8c:	18 ec       	ldi	r17, 0xC8	; 200
		}
		
		//if the buffer is full, process data received
		if(coms_messageReceivedCounter == 2) {
			coms_messageReceivedCounter = 0;
			coms_receivedMessage.B.firstHalf = coms_idCmdMessage;
  8e:	c0 e0       	ldi	r28, 0x00	; 0
  90:	d1 e0       	ldi	r29, 0x01	; 1
	{
		//TODO: change counter to a timer counter instead of the delay...
		//TODO: dimm light change
		
		//test blink
		if(os_stateMachine == 0u) {
  92:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <os_stateMachine>
  96:	81 11       	cpse	r24, r1
  98:	1d c0       	rjmp	.+58     	; 0xd4 <main+0x4e>
			if((os_counter % 1u) == 0u) {
				os_ledBlinkCount++;
  9a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <os_ledBlinkCount>
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	68 0f       	add	r22, r24
  a2:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <os_ledBlinkCount>
				if(os_ledBlinkCount >= 300u) {
					os_ledBlinkCount = 0u;
				}
			}if (os_ledBlinkCount <= 100u)
  a6:	65 36       	cpi	r22, 0x65	; 101
  a8:	38 f4       	brcc	.+14     	; 0xb8 <main+0x32>
			{
				pwm_changeLightsIntensity(1u, os_ledBlinkCount);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	a8 d0       	rcall	.+336    	; 0x1fe <pwm_changeLightsIntensity>
				pwm_changeLightsIntensity(2u, os_ledBlinkCount);
  ae:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <os_ledBlinkCount>
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	a4 d0       	rcall	.+328    	; 0x1fe <pwm_changeLightsIntensity>
  b6:	0e c0       	rjmp	.+28     	; 0xd4 <main+0x4e>
				//pwm_changeLightsIntensity(3, os_ledBlinkCount);
			} else if ((os_ledBlinkCount > 100u) && (os_ledBlinkCount <= 200u)){
  b8:	84 56       	subi	r24, 0x64	; 100
  ba:	84 36       	cpi	r24, 0x64	; 100
  bc:	58 f4       	brcc	.+22     	; 0xd4 <main+0x4e>
				pwm_changeLightsIntensity(1u, 200u - os_ledBlinkCount);
  be:	21 2f       	mov	r18, r17
  c0:	26 1b       	sub	r18, r22
  c2:	62 2f       	mov	r22, r18
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	9b d0       	rcall	.+310    	; 0x1fe <pwm_changeLightsIntensity>
				pwm_changeLightsIntensity(2u, 200u - os_ledBlinkCount);
  c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <os_ledBlinkCount>
  cc:	61 2f       	mov	r22, r17
  ce:	68 1b       	sub	r22, r24
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	95 d0       	rcall	.+298    	; 0x1fe <pwm_changeLightsIntensity>
				//pwm_changeLightsIntensity(3, 200 - os_ledBlinkCount);
			}
		}
		
		//handle communication timeout after 100 ms of last message received
		if(coms_messageReceivedCounter > 0u) {
  d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <coms_messageReceivedCounter>
  d8:	99 23       	and	r25, r25
  da:	c1 f1       	breq	.+112    	; 0x14c <main+0xc6>
			coms_messageReceivedTimeout++;
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <coms_messageReceivedTimeout>
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <coms_messageReceivedTimeout>
			if(coms_messageReceivedTimeout >= 100u) {
  e6:	84 36       	cpi	r24, 0x64	; 100
  e8:	48 f0       	brcs	.+18     	; 0xfc <main+0x76>
				coms_messageReceivedTimeout = 0u;
  ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <coms_messageReceivedTimeout>
				coms_messageReceivedCounter = 0u;
  ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <coms_messageReceivedCounter>
				coms_idCmdMessage = 0u;
  f2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <coms_idCmdMessage>
				coms_valueMessage = 0u;
  f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <coms_valueMessage>
  fa:	28 c0       	rjmp	.+80     	; 0x14c <main+0xc6>
			}
		}
		
		//if the buffer is full, process data received
		if(coms_messageReceivedCounter == 2) {
  fc:	92 30       	cpi	r25, 0x02	; 2
  fe:	31 f5       	brne	.+76     	; 0x14c <main+0xc6>
			coms_messageReceivedCounter = 0;
 100:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <coms_messageReceivedCounter>
			coms_receivedMessage.B.firstHalf = coms_idCmdMessage;
 104:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <coms_idCmdMessage>
 108:	88 83       	st	Y, r24
			coms_receivedMessage.B.secondHalf = coms_valueMessage;
 10a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <coms_valueMessage>
 10e:	69 83       	std	Y+1, r22	; 0x01
			
			if((coms_receivedMessage.F.ID == HEX_ID) || (coms_receivedMessage.F.ID == HEX_ID_0)) {
 110:	8b 70       	andi	r24, 0x0B	; 11
 112:	e1 f4       	brne	.+56     	; 0x14c <main+0xc6>
				switch (coms_receivedMessage.F.CMD) {
 114:	88 81       	ld	r24, Y
 116:	82 95       	swap	r24
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	49 f0       	breq	.+18     	; 0x130 <main+0xaa>
 11e:	28 f0       	brcs	.+10     	; 0x12a <main+0xa4>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	59 f0       	breq	.+22     	; 0x13a <main+0xb4>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	71 f0       	breq	.+28     	; 0x144 <main+0xbe>
 128:	11 c0       	rjmp	.+34     	; 0x14c <main+0xc6>
					
					case 0x00u:
						//blink
						os_stateMachine = 0;
 12a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <os_stateMachine>
						break;
 12e:	0e c0       	rjmp	.+28     	; 0x14c <main+0xc6>
						
					case 0x01u:
						//set red intensity
						if(coms_receivedMessage.F.VAL <= 100u) {
 130:	65 36       	cpi	r22, 0x65	; 101
 132:	60 f4       	brcc	.+24     	; 0x14c <main+0xc6>
							pwm_changeLightsIntensity(1, (uint8_t) coms_receivedMessage.F.VAL);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	63 d0       	rcall	.+198    	; 0x1fe <pwm_changeLightsIntensity>
 138:	09 c0       	rjmp	.+18     	; 0x14c <main+0xc6>
						}
						break;
						
					case 0x02u:
						//set red intensity
						if(coms_receivedMessage.F.VAL <= 100u) {
 13a:	65 36       	cpi	r22, 0x65	; 101
 13c:	38 f4       	brcc	.+14     	; 0x14c <main+0xc6>
							pwm_changeLightsIntensity(2, (uint8_t) coms_receivedMessage.F.VAL);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	5e d0       	rcall	.+188    	; 0x1fe <pwm_changeLightsIntensity>
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0xc6>
						}
						break;
						
					case 0x03u:
						//set red intensity
						if(coms_receivedMessage.F.VAL <= 100u) {
 144:	65 36       	cpi	r22, 0x65	; 101
 146:	10 f4       	brcc	.+4      	; 0x14c <main+0xc6>
							pwm_changeLightsIntensity(3, (uint8_t) coms_receivedMessage.F.VAL);
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	59 d0       	rcall	.+178    	; 0x1fe <pwm_changeLightsIntensity>
				}
			}
		}
		
		//tick every 10 ms and sleep
		os_counter++;
 14c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <os_counter>
 150:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <os_counter+0x1>
 154:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <os_counter+0x2>
 158:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <os_counter+0x3>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	a1 1d       	adc	r26, r1
 160:	b1 1d       	adc	r27, r1
 162:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <os_counter>
 166:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <os_counter+0x1>
 16a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <os_counter+0x2>
 16e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <os_counter+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f ec       	ldi	r24, 0xCF	; 207
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xf0>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xf6>
 17c:	00 00       	nop
		_delay_ms(1);
		//clear the counter every second
		if(os_counter >= 1000) {
 17e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <os_counter>
 182:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <os_counter+0x1>
 186:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <os_counter+0x2>
 18a:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <os_counter+0x3>
 18e:	88 3e       	cpi	r24, 0xE8	; 232
 190:	93 40       	sbci	r25, 0x03	; 3
 192:	a1 05       	cpc	r26, r1
 194:	b1 05       	cpc	r27, r1
 196:	08 f4       	brcc	.+2      	; 0x19a <main+0x114>
 198:	7c cf       	rjmp	.-264    	; 0x92 <main+0xc>
			os_counter = 0;
 19a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <os_counter>
 19e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <os_counter+0x1>
 1a2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <os_counter+0x2>
 1a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <os_counter+0x3>
 1aa:	73 cf       	rjmp	.-282    	; 0x92 <main+0xc>

000001ac <__vector_18>:
	}
}

//Interrupt service routine for RX message received
ISR ( USART_RX_vect )
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
	os_stateMachine = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <os_stateMachine>
	//disable interrupts
	//cli();
	
	//if this is the first message:
	if (coms_messageReceivedCounter == 0) {
 1be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <coms_messageReceivedCounter>
 1c2:	81 11       	cpse	r24, r1
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <__vector_18+0x2a>
		coms_idCmdMessage = UDR0;
 1c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 1ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <coms_idCmdMessage>
		coms_messageReceivedCounter++;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <coms_messageReceivedCounter>
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <__vector_18+0x46>
	} 
	//if this is the second message:
	else if (coms_messageReceivedCounter == 1) {
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	41 f4       	brne	.+16     	; 0x1ea <__vector_18+0x3e>
		coms_valueMessage = UDR0;
 1da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 1de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coms_valueMessage>
		coms_messageReceivedCounter++;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <coms_messageReceivedCounter>
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <__vector_18+0x46>
	}
	//error 
	else {
		//error;
		coms_idCmdMessage = 0;
 1ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <coms_idCmdMessage>
		coms_valueMessage = 0;
 1ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <coms_valueMessage>
	}
	
	//enable interrupts
	//sei();
	//pwm_changeLightsIntensity(1, 50);
}
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <pwm_changeLightsIntensity>:
	pwm_initWaveLength2();
	//pwm_initWaveLength3();
}

void pwm_changeLightsIntensity (char light, char intensity)
{
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	c6 2f       	mov	r28, r22
	char D = 0;
	//intensity value must be a char value between 0 and 100
	if (intensity <= 100){
 20e:	65 36       	cpi	r22, 0x65	; 101
 210:	0c f0       	brlt	.+2      	; 0x214 <pwm_changeLightsIntensity+0x16>
 212:	e2 c0       	rjmp	.+452    	; 0x3d8 <__stack+0xd9>
		//set the respective wavelength intensity
		switch (light) {
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	09 f4       	brne	.+2      	; 0x21a <pwm_changeLightsIntensity+0x1c>
 218:	53 c0       	rjmp	.+166    	; 0x2c0 <pwm_changeLightsIntensity+0xc2>
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	09 f4       	brne	.+2      	; 0x220 <pwm_changeLightsIntensity+0x22>
 21e:	97 c0       	rjmp	.+302    	; 0x34e <__stack+0x4f>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	09 f0       	breq	.+2      	; 0x226 <pwm_changeLightsIntensity+0x28>
 224:	d9 c0       	rjmp	.+434    	; 0x3d8 <__stack+0xd9>
			case 1:
				if(intensity > intensity_A_old) {
 226:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <intensity_A_old>
 22a:	a6 17       	cp	r26, r22
 22c:	1c f5       	brge	.+70     	; 0x274 <pwm_changeLightsIntensity+0x76>
}

void pwm_setWaveLength1 (char D)
{
	//Set duty cycle
	OCR2B = D;
 22e:	0f 2e       	mov	r0, r31
 230:	f4 e6       	ldi	r31, 0x64	; 100
 232:	cf 2e       	mov	r12, r31
 234:	d1 2c       	mov	r13, r1
 236:	e1 2c       	mov	r14, r1
 238:	f1 2c       	mov	r15, r1
 23a:	f0 2d       	mov	r31, r0
 23c:	04 eb       	ldi	r16, 0xB4	; 180
 23e:	10 e0       	ldi	r17, 0x00	; 0
		//set the respective wavelength intensity
		switch (light) {
			case 1:
				if(intensity > intensity_A_old) {
					while(intensity_A_old < intensity) {
						intensity_A_old++;
 240:	af 5f       	subi	r26, 0xFF	; 255
 242:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <intensity_A_old>
}

void pwm_setWaveLength1 (char D)
{
	//Set duty cycle
	OCR2B = D;
 246:	0a 2e       	mov	r0, r26
 248:	00 0c       	add	r0, r0
 24a:	bb 0b       	sbc	r27, r27
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	11 d1       	rcall	.+546    	; 0x474 <__usmulhisi3>
 252:	a7 01       	movw	r20, r14
 254:	96 01       	movw	r18, r12
 256:	ec d0       	rcall	.+472    	; 0x430 <__udivmodsi4>
 258:	20 95       	com	r18
 25a:	f8 01       	movw	r30, r16
 25c:	20 83       	st	Z, r18
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	97 e2       	ldi	r25, 0x27	; 39
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <pwm_changeLightsIntensity+0x64>
 266:	00 c0       	rjmp	.+0      	; 0x268 <pwm_changeLightsIntensity+0x6a>
 268:	00 00       	nop
	if (intensity <= 100){
		//set the respective wavelength intensity
		switch (light) {
			case 1:
				if(intensity > intensity_A_old) {
					while(intensity_A_old < intensity) {
 26a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <intensity_A_old>
 26e:	ac 17       	cp	r26, r28
 270:	3c f3       	brlt	.-50     	; 0x240 <pwm_changeLightsIntensity+0x42>
 272:	b2 c0       	rjmp	.+356    	; 0x3d8 <__stack+0xd9>
						intensity_A_old++;
						D = 255 - ((uint32_t) intensity_A_old * 255/100);
						pwm_setWaveLength1(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_A_old){
 274:	6a 17       	cp	r22, r26
 276:	0c f0       	brlt	.+2      	; 0x27a <pwm_changeLightsIntensity+0x7c>
 278:	af c0       	rjmp	.+350    	; 0x3d8 <__stack+0xd9>
}

void pwm_setWaveLength1 (char D)
{
	//Set duty cycle
	OCR2B = D;
 27a:	0f 2e       	mov	r0, r31
 27c:	f4 e6       	ldi	r31, 0x64	; 100
 27e:	cf 2e       	mov	r12, r31
 280:	d1 2c       	mov	r13, r1
 282:	e1 2c       	mov	r14, r1
 284:	f1 2c       	mov	r15, r1
 286:	f0 2d       	mov	r31, r0
 288:	04 eb       	ldi	r16, 0xB4	; 180
 28a:	10 e0       	ldi	r17, 0x00	; 0
						pwm_setWaveLength1(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_A_old){
					while(intensity_A_old > intensity) {
						intensity_A_old--;
 28c:	a1 50       	subi	r26, 0x01	; 1
 28e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <intensity_A_old>
}

void pwm_setWaveLength1 (char D)
{
	//Set duty cycle
	OCR2B = D;
 292:	0a 2e       	mov	r0, r26
 294:	00 0c       	add	r0, r0
 296:	bb 0b       	sbc	r27, r27
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	eb d0       	rcall	.+470    	; 0x474 <__usmulhisi3>
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	c6 d0       	rcall	.+396    	; 0x430 <__udivmodsi4>
 2a4:	20 95       	com	r18
 2a6:	f8 01       	movw	r30, r16
 2a8:	20 83       	st	Z, r18
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	97 e2       	ldi	r25, 0x27	; 39
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <pwm_changeLightsIntensity+0xb0>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <pwm_changeLightsIntensity+0xb6>
 2b4:	00 00       	nop
						D = 255 - ((uint32_t) intensity_A_old * 255/100);
						pwm_setWaveLength1(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_A_old){
					while(intensity_A_old > intensity) {
 2b6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <intensity_A_old>
 2ba:	ca 17       	cp	r28, r26
 2bc:	3c f3       	brlt	.-50     	; 0x28c <pwm_changeLightsIntensity+0x8e>
 2be:	8c c0       	rjmp	.+280    	; 0x3d8 <__stack+0xd9>
						_delay_ms(TRANSITION_DELAY);
					}
				}
				break;
			case 2:
				if(intensity > intensity_B_old) {
 2c0:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <intensity_B_old>
 2c4:	a6 17       	cp	r26, r22
 2c6:	04 f5       	brge	.+64     	; 0x308 <__stack+0x9>
}

void pwm_setWaveLength2 (char D)
{
	//Set duty cycle
	OCR0B = D;
 2c8:	0f 2e       	mov	r0, r31
 2ca:	f4 e6       	ldi	r31, 0x64	; 100
 2cc:	cf 2e       	mov	r12, r31
 2ce:	d1 2c       	mov	r13, r1
 2d0:	e1 2c       	mov	r14, r1
 2d2:	f1 2c       	mov	r15, r1
 2d4:	f0 2d       	mov	r31, r0
				}
				break;
			case 2:
				if(intensity > intensity_B_old) {
					while(intensity_B_old < intensity) {
						intensity_B_old++;
 2d6:	af 5f       	subi	r26, 0xFF	; 255
 2d8:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <intensity_B_old>
}

void pwm_setWaveLength2 (char D)
{
	//Set duty cycle
	OCR0B = D;
 2dc:	0a 2e       	mov	r0, r26
 2de:	00 0c       	add	r0, r0
 2e0:	bb 0b       	sbc	r27, r27
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	c6 d0       	rcall	.+396    	; 0x474 <__usmulhisi3>
 2e8:	a7 01       	movw	r20, r14
 2ea:	96 01       	movw	r18, r12
 2ec:	a1 d0       	rcall	.+322    	; 0x430 <__udivmodsi4>
 2ee:	20 95       	com	r18
 2f0:	28 bd       	out	0x28, r18	; 40
 2f2:	ef e0       	ldi	r30, 0x0F	; 15
 2f4:	f7 e2       	ldi	r31, 0x27	; 39
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <pwm_changeLightsIntensity+0xf8>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <pwm_changeLightsIntensity+0xfe>
 2fc:	00 00       	nop
					}
				}
				break;
			case 2:
				if(intensity > intensity_B_old) {
					while(intensity_B_old < intensity) {
 2fe:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <intensity_B_old>
 302:	ac 17       	cp	r26, r28
 304:	44 f3       	brlt	.-48     	; 0x2d6 <pwm_changeLightsIntensity+0xd8>
 306:	68 c0       	rjmp	.+208    	; 0x3d8 <__stack+0xd9>
						intensity_B_old++;
						D = 255 - ((uint32_t) intensity_B_old * 255/100);
						pwm_setWaveLength2(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_B_old){
 308:	6a 17       	cp	r22, r26
 30a:	0c f0       	brlt	.+2      	; 0x30e <__stack+0xf>
 30c:	65 c0       	rjmp	.+202    	; 0x3d8 <__stack+0xd9>
}

void pwm_setWaveLength2 (char D)
{
	//Set duty cycle
	OCR0B = D;
 30e:	0f 2e       	mov	r0, r31
 310:	f4 e6       	ldi	r31, 0x64	; 100
 312:	cf 2e       	mov	r12, r31
 314:	d1 2c       	mov	r13, r1
 316:	e1 2c       	mov	r14, r1
 318:	f1 2c       	mov	r15, r1
 31a:	f0 2d       	mov	r31, r0
						pwm_setWaveLength2(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_B_old){
					while(intensity_B_old > intensity) {
						intensity_B_old--;
 31c:	a1 50       	subi	r26, 0x01	; 1
 31e:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <intensity_B_old>
}

void pwm_setWaveLength2 (char D)
{
	//Set duty cycle
	OCR0B = D;
 322:	0a 2e       	mov	r0, r26
 324:	00 0c       	add	r0, r0
 326:	bb 0b       	sbc	r27, r27
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	a3 d0       	rcall	.+326    	; 0x474 <__usmulhisi3>
 32e:	a7 01       	movw	r20, r14
 330:	96 01       	movw	r18, r12
 332:	7e d0       	rcall	.+252    	; 0x430 <__udivmodsi4>
 334:	20 95       	com	r18
 336:	28 bd       	out	0x28, r18	; 40
 338:	8f e0       	ldi	r24, 0x0F	; 15
 33a:	97 e2       	ldi	r25, 0x27	; 39
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <__stack+0x3d>
 340:	00 c0       	rjmp	.+0      	; 0x342 <__stack+0x43>
 342:	00 00       	nop
						D = 255 - ((uint32_t) intensity_B_old * 255/100);
						pwm_setWaveLength2(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_B_old){
					while(intensity_B_old > intensity) {
 344:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <intensity_B_old>
 348:	ca 17       	cp	r28, r26
 34a:	44 f3       	brlt	.-48     	; 0x31c <__stack+0x1d>
 34c:	45 c0       	rjmp	.+138    	; 0x3d8 <__stack+0xd9>
						_delay_ms(TRANSITION_DELAY);
					}
				}
				break;
			case 3:
				if(intensity > intensity_C_old) {
 34e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <intensity_C_old>
 352:	a6 17       	cp	r26, r22
 354:	04 f5       	brge	.+64     	; 0x396 <__stack+0x97>
}

void pwm_setWaveLength3 (char D)
{
	//Set duty cycle
	OCR0A = D;
 356:	0f 2e       	mov	r0, r31
 358:	f4 e6       	ldi	r31, 0x64	; 100
 35a:	cf 2e       	mov	r12, r31
 35c:	d1 2c       	mov	r13, r1
 35e:	e1 2c       	mov	r14, r1
 360:	f1 2c       	mov	r15, r1
 362:	f0 2d       	mov	r31, r0
				}
				break;
			case 3:
				if(intensity > intensity_C_old) {
					while(intensity_C_old < intensity) {
						intensity_C_old++;
 364:	af 5f       	subi	r26, 0xFF	; 255
 366:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <intensity_C_old>
}

void pwm_setWaveLength3 (char D)
{
	//Set duty cycle
	OCR0A = D;
 36a:	0a 2e       	mov	r0, r26
 36c:	00 0c       	add	r0, r0
 36e:	bb 0b       	sbc	r27, r27
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	7f d0       	rcall	.+254    	; 0x474 <__usmulhisi3>
 376:	a7 01       	movw	r20, r14
 378:	96 01       	movw	r18, r12
 37a:	5a d0       	rcall	.+180    	; 0x430 <__udivmodsi4>
 37c:	20 95       	com	r18
 37e:	27 bd       	out	0x27, r18	; 39
 380:	ef e0       	ldi	r30, 0x0F	; 15
 382:	f7 e2       	ldi	r31, 0x27	; 39
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <__stack+0x85>
 388:	00 c0       	rjmp	.+0      	; 0x38a <__stack+0x8b>
 38a:	00 00       	nop
					}
				}
				break;
			case 3:
				if(intensity > intensity_C_old) {
					while(intensity_C_old < intensity) {
 38c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <intensity_C_old>
 390:	ac 17       	cp	r26, r28
 392:	44 f3       	brlt	.-48     	; 0x364 <__stack+0x65>
 394:	21 c0       	rjmp	.+66     	; 0x3d8 <__stack+0xd9>
						intensity_C_old++;
						D = 255 - ((uint32_t) intensity_C_old * 255/100);
						pwm_setWaveLength3(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_C_old){
 396:	6a 17       	cp	r22, r26
 398:	fc f4       	brge	.+62     	; 0x3d8 <__stack+0xd9>
}

void pwm_setWaveLength3 (char D)
{
	//Set duty cycle
	OCR0A = D;
 39a:	0f 2e       	mov	r0, r31
 39c:	f4 e6       	ldi	r31, 0x64	; 100
 39e:	cf 2e       	mov	r12, r31
 3a0:	d1 2c       	mov	r13, r1
 3a2:	e1 2c       	mov	r14, r1
 3a4:	f1 2c       	mov	r15, r1
 3a6:	f0 2d       	mov	r31, r0
						pwm_setWaveLength3(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_C_old){
					while(intensity_C_old > intensity) {
						intensity_C_old--;
 3a8:	a1 50       	subi	r26, 0x01	; 1
 3aa:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <intensity_C_old>
}

void pwm_setWaveLength3 (char D)
{
	//Set duty cycle
	OCR0A = D;
 3ae:	0a 2e       	mov	r0, r26
 3b0:	00 0c       	add	r0, r0
 3b2:	bb 0b       	sbc	r27, r27
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	5d d0       	rcall	.+186    	; 0x474 <__usmulhisi3>
 3ba:	a7 01       	movw	r20, r14
 3bc:	96 01       	movw	r18, r12
 3be:	38 d0       	rcall	.+112    	; 0x430 <__udivmodsi4>
 3c0:	20 95       	com	r18
 3c2:	27 bd       	out	0x27, r18	; 39
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	97 e2       	ldi	r25, 0x27	; 39
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <__stack+0xc9>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <__stack+0xcf>
 3ce:	00 00       	nop
						D = 255 - ((uint32_t) intensity_C_old * 255/100);
						pwm_setWaveLength3(D);
						_delay_ms(TRANSITION_DELAY);
					}
				} else if (intensity < intensity_C_old){
					while(intensity_C_old > intensity) {
 3d0:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <intensity_C_old>
 3d4:	ca 17       	cp	r28, r26
 3d6:	44 f3       	brlt	.-48     	; 0x3a8 <__stack+0xa9>
				break;
			default:
				break;
		}
	}
}
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	08 95       	ret

000003e8 <pwm_initWaveLength1>:
void pwm_initWaveLength1 (void)
{
	//use OC2B for wavelength 1
	
	// Set duty cycle to the maximum - light off
	OCR2B = 255;
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__EEPROM_REGION_LENGTH__+0x7f00b4>
	// Compare Output Mode: Clear timer on Compare Match
	TCCR2A |= (1 << COM2B1);
 3ee:	e0 eb       	ldi	r30, 0xB0	; 176
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	80 83       	st	Z, r24
	// Waveform Generation Mode 1: PWM, Phase Correct with top at 0xFF
	TCCR2A |= (1 << WGM20);
 3f8:	80 81       	ld	r24, Z
 3fa:	81 60       	ori	r24, 0x01	; 1
 3fc:	80 83       	st	Z, r24
	// Clock Select: CLKIO/1
	TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
 3fe:	e1 eb       	ldi	r30, 0xB1	; 177
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	81 60       	ori	r24, 0x01	; 1
 406:	80 83       	st	Z, r24
 408:	08 95       	ret

0000040a <pwm_initWaveLength2>:
void pwm_initWaveLength2 (void)
{
	//use OC0B for wavelength 1
	
	// Set duty cycle to the maximum - light off
	OCR0B = 255;
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	88 bd       	out	0x28, r24	; 40
	// Compare Output Mode: Clear timer on Compare Match
	TCCR0A |= (1 << COM0B1);
 40e:	84 b5       	in	r24, 0x24	; 36
 410:	80 62       	ori	r24, 0x20	; 32
 412:	84 bd       	out	0x24, r24	; 36
	// Waveform Generation Mode 1: PWM, Phase Correct with top at 0xFF						
	TCCR0A |= (1 << WGM00);
 414:	84 b5       	in	r24, 0x24	; 36
 416:	81 60       	ori	r24, 0x01	; 1
 418:	84 bd       	out	0x24, r24	; 36
	// Clock Select: CLKIO/1
	TCCR0B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
 41a:	85 b5       	in	r24, 0x25	; 37
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	85 bd       	out	0x25, r24	; 37
 420:	08 95       	ret

00000422 <pwm_initLight>:
void pwm_setWaveLength3(char D);


void pwm_initLight(void) {
	//set output pins as high
	HIGH(PWM_1);
 422:	5b 9a       	sbi	0x0b, 3	; 11
	HIGH(PWM_2);
 424:	5d 9a       	sbi	0x0b, 5	; 11
	//HIGH(PWM_3);
	
	//set PWM pins as output
	OUTPUT(PWM_1);
 426:	53 9a       	sbi	0x0a, 3	; 10
	OUTPUT(PWM_2);
 428:	55 9a       	sbi	0x0a, 5	; 10
	//OUTPUT(PWM_3);
	
	//initialize timers as PWM
	pwm_initWaveLength1();
 42a:	de df       	rcall	.-68     	; 0x3e8 <pwm_initWaveLength1>
	pwm_initWaveLength2();
 42c:	ee cf       	rjmp	.-36     	; 0x40a <pwm_initWaveLength2>
 42e:	08 95       	ret

00000430 <__udivmodsi4>:
 430:	a1 e2       	ldi	r26, 0x21	; 33
 432:	1a 2e       	mov	r1, r26
 434:	aa 1b       	sub	r26, r26
 436:	bb 1b       	sub	r27, r27
 438:	fd 01       	movw	r30, r26
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__udivmodsi4_ep>

0000043c <__udivmodsi4_loop>:
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	ee 1f       	adc	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	a2 17       	cp	r26, r18
 446:	b3 07       	cpc	r27, r19
 448:	e4 07       	cpc	r30, r20
 44a:	f5 07       	cpc	r31, r21
 44c:	20 f0       	brcs	.+8      	; 0x456 <__udivmodsi4_ep>
 44e:	a2 1b       	sub	r26, r18
 450:	b3 0b       	sbc	r27, r19
 452:	e4 0b       	sbc	r30, r20
 454:	f5 0b       	sbc	r31, r21

00000456 <__udivmodsi4_ep>:
 456:	66 1f       	adc	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	1a 94       	dec	r1
 460:	69 f7       	brne	.-38     	; 0x43c <__udivmodsi4_loop>
 462:	60 95       	com	r22
 464:	70 95       	com	r23
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	9b 01       	movw	r18, r22
 46c:	ac 01       	movw	r20, r24
 46e:	bd 01       	movw	r22, r26
 470:	cf 01       	movw	r24, r30
 472:	08 95       	ret

00000474 <__usmulhisi3>:
 474:	05 d0       	rcall	.+10     	; 0x480 <__umulhisi3>

00000476 <__usmulhisi3_tail>:
 476:	b7 ff       	sbrs	r27, 7
 478:	08 95       	ret
 47a:	82 1b       	sub	r24, r18
 47c:	93 0b       	sbc	r25, r19
 47e:	08 95       	ret

00000480 <__umulhisi3>:
 480:	a2 9f       	mul	r26, r18
 482:	b0 01       	movw	r22, r0
 484:	b3 9f       	mul	r27, r19
 486:	c0 01       	movw	r24, r0
 488:	a3 9f       	mul	r26, r19
 48a:	01 d0       	rcall	.+2      	; 0x48e <__umulhisi3+0xe>
 48c:	b2 9f       	mul	r27, r18
 48e:	70 0d       	add	r23, r0
 490:	81 1d       	adc	r24, r1
 492:	11 24       	eor	r1, r1
 494:	91 1d       	adc	r25, r1
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
